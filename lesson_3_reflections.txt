When would you want to use a remote repository rather than keeping all your work local?
If you are collaborating with other users, want to share your work, or are workign from 
multiple computers. Or maybe you just want a backup. 

Why might you want to always pull changes manually rather than having Git automatically stay up-to-date with your remote repository?
You may not be ready to integrate features that have been pushed to the remote repository. 
But I think usually it is a good idea to stay in sync with the latest 
remote repository changes.

Describe the differences between forks, clones, and branches. When would you use one instead of another?
Branches are different code lineages within a repository. Clones are copies of a 
repository and its commit history. Forks are clones of a repository which is
managed by a central git server and refers to the original repository source
making it easier to merge changes from your clone back to that source.

What is the benefit of having a copy of the last known state of the remote stored locally?
If you want to work offline you can still compare your changes to the last
known state of the remote. You can merge locally and push changes later when you are 
online again.

How would you collaborate without using Git or GitHub? What would be easier, and what would be harder?
You could have a central server with a bare git repository and you would
need to do all merge and compare features on the command line. Most things would
be harder I think. They are great tools.

When would you want to make changes in a separate branch rather than directly in master? What benefits does each approach have?
I would do this when I want to keep my changes distinct from the known state of 
master. Maybe I am adding a new feature or just don't want to get into a situation
where I need to make a change to master to fix a high priority bug but find myself
with a bunch of changes I need to hide first.
